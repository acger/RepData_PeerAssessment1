qplot(votes, rating, data = movies, panel = panel.loess)
library(ggplot2)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
swirl()
packages.install("swirl")
install.packages("swirl")
library(swirl)
swirl()
swirl()
install_from_swirl("Exploratory Data Analysis")
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageversion("dplyr")
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country = "US")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id)
)
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, cran:ip_id, size)
?select
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(my_package, mean(size))
summarize(by_package, mean(size))
?n
?n_distinct
submit()
pack_sum
quantile(pack_sum$count, probs=0.99)
top_counts <- filter(pack_sum, size > 679)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, count)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
Consult <- gather(students, sex_class, count, -grade)
Consult <- gather(students, sex_class, count)
Consult <- gather(students2, sex_class, count, -grade)
Consult <- gather(students2, sex_class, count)
res <- gather(students2, sex_class, count, -grade)
res
?seperate
?separate
separate(res, sex_class, c("sex", "class"))
View(cran2)
View(students2)
submit()
students3
View(students3)
submit()
?spread
submit()
submit()
submit()
extract_numeric("class5")
submit()
?mutate
submit()
?extract_numeric
?mutate
submit()
submit()
reset()
submit()
submit()
students4
submit()
?unique
submit()
submit()
passed
failed
passed <- mutate(status = "passed")
passed <- mutate(passed, status = "passed")
failed <- mutate(failed, status = "failed")
?bind_rows
bind_rows(passed, failed)
sat
?separate
submit()
submit()
submit()
unzip("activity.zip")
setwd("~/EDU/Data Science Specialization/Course 5/Project 1/RepData_PeerAssessment1")
unzip("activity.zip")
# Read the data in a data frame
data <- read.csv("activity.csv", header = TRUE, na.strings = "NA", stringsAsFactors = FALSE)
data$steps <- as.numeric(data$steps)
data$date <- as.Date(data$date)
data$interval <- as.numeric(data$interval)
# Display the first rows
head(data)
sumPerDay <- tapply(data$steps, data$date, sum, na.rm = TRUE)
mean(sumPerDay)
hist(sumPerDay)
meanOfStepsPerInterval <- aggregate(steps ~ interval, data, mean)
# Plot calculated mean
plot(meanOfStepsPerInterval, type = "l", main = "Average number of steps per 5 minute interval", xlab = "5-minute interval", ylab = "Average number of steps taken")
maximumNoOfSteps <- meanOfStepsPerInterval[which.max(meanOfStepsPerInterval$steps), ]
maximumNoOfSteps$interval
sum(!complete.cases(data))
anyNA(data$steps)
anyNA(data$Date)
anyNA(data$interval)
data2 <- data
meanOfStepsPerDay <- aggregate(steps ~ date, data, mean)
View(meanOfStepsPerDay)
?hist
hist(sumPerDay, breaks="35")
hist(sumPerDay, breaks= 35)
hist(sumPerDay, breaks= 50)
hist(sumPerDay, breaks = 50)
hist(sumPerDay, breaks = 100)
hist(sumPerDay, breaks = 25)
hist(sumPerDay, breaks = 20)
?matches
?match
meanOfStepsPerDay[data2$date == meanOfStepsPerDay$date, ]
data2$n_steps <- ifelse(is.na(data2$steps), meanOfStepsPerDay[matches(meandata2$date], data2$steps)
data2$n_steps <- ifelse(is.na(data2$steps), meanOfStepsPerDay[matches(meandata2$date), ], data2$steps]
?aggregate
?merge
View(data2)
merge(data2, meanOfStepsPerDay, by.x = "date", by.y = "date")
tempDf <- merge(data2, meanOfStepsPerDay, by.x = "date", by.y = "date")
View(tempDf)
data2$steps <- ifelse(is.na(data2$steps), tempDf$steps.x, tempDf$steps.y]
data2$steps <- ifelse(is.na(data2$steps), tempDf$steps.x, tempDf$steps.y)
merge(data2, meanOfStepsPerDay, by.x = "date", by.y = "date")
data2$steps <- ifelse(is.na(data2$steps), tempDf$steps.x, tempDf$steps.y)
View(data2)
data2 <- data
# Calculate the mean of steps per day
meanOfStepsPerDay <- aggregate(steps ~ date, data, mean)
tempDf <- merge(data2, meanOfStepsPerDay, by.x = "date", by.y = "date")
data2$n_steps <- ifelse(is.na(data2$steps), tempDf$steps.x, tempDf$steps.y)
View(data2)
data2$n_steps <- ifelse(is.na(data2$steps), tempDf$steps.y, tempDf$steps.x)
View(data2)
aggregatedStepsPerDay <- aggregate(steps ~ interval, data2, sum)
hist(aggregatedStepsPerDay, breaks = 20, main = "Histogram of the sum of steps per day")
View(aggregatedStepsPerDay)
aggregatedStepsPerDay <- aggregate(steps ~ date, data2, sum)
View(aggregatedStepsPerDay)
hist(aggregatedStepsPerDay, breaks = 20, main = "Histogram of the sum of steps per day")
hist(aggregatedStepsPerDay$steps, breaks = 20, main = "Histogram of the sum of steps per day")
?abline
meanStepsPerDay <- mean(aggregatedStepsPerDay$steps)
abline(v = meanStepsPerDay)
medianStepsPerDay <- median(aggregatedStepsPerDay$steps)
abline(v = medianStepsPerDay)
medianStepsPerDay <- median(aggregatedStepsPerDay$steps)
abline(v = medianStepsPerDay)
meanStepsPerDay <- mean(aggregatedStepsPerDay$steps)
abline(v = meanStepsPerDay)
medianStepsPerDay <- median(aggregatedStepsPerDay$steps)
data2 <- data
# Calculate the mean of steps per day
meanOfStepsPerDay <- aggregate(steps ~ date, data, mean)
# Create data frame of same length as data2 with the original steps and the imputed values
tempDf <- merge(data2, meanOfStepsPerDay, by.x = "date", by.y = "date")
# Copy values where steps is NA
data2$steps <- ifelse(is.na(data2$steps), tempDf$steps.y, tempDf$steps.x)
# Calculate the mean per interval (use aggregate instead of tapply because it returs a data frame)
aggregatedStepsPerDay <- aggregate(steps ~ date, data2, sum)
hist(aggregatedStepsPerDay$steps, breaks = 20, main = "Histogram of the sum of steps per day")
# Draw lines for mean and median
meanStepsPerDay <- mean(aggregatedStepsPerDay$steps)
abline(v = meanStepsPerDay)
medianStepsPerDay <- median(aggregatedStepsPerDay$steps)
abline(v = medianStepsPerDay)
abline(v = meanStepsPerDay, col = "red")
medianStepsPerDay <- median(aggregatedStepsPerDay$steps)
abline(v = medianStepsPerDay, col = "blue")
?legend
legend(x = "topright", legend = c("mean", "median"), col = c("red", "blue"))
legend(x = "topright", legend = c("mean", "median"), col = c("red", "blue"), lty = 2)
legend(x = "topright", legend = c("mean", "median"), col = c("red", "blue"), lty = 1)
?weekday
??weekday
?weekdays
weekdays (now())
weekdays(data2$date)
weekdays(data2$date, abbreviate = TRUE)
Sys.setlocale("LC_TIME", "English")
weekdays(data2$date, abbreviate = TRUE)
?factor
factor(weekdays(data2$date) %in% c("Sat", "Sun"), levels =c(1, 2), labels = c("weekend", "weekday"))
factor(weekdays(data2$date) %in% c("Sat", "Sun"), levels = 1:2, labels = c("weekend", "weekday"))
weekdays(data2$date)
factor(weekdays(data2$date) %in% c("Saturday", "Sunday"), levels = 1:2, labels = c("weekend", "weekday"))
weekdays(data2$date) %in% c("Saturday", "Sunday")
factor(weekdays(data2$date) %in% c("Saturday", "Sunday") + 1L, levels = 1:2, labels = c("weekend", "weekday"))
factor(weekdays(data2$date) %in% c("Saturday", "Sunday") + 1L, levels = 1:2, labels = c("weekday", "weekend"))
weekdays(data2$date) %in% c("Saturday", "Sunday")
data2$weekday <- factor(weekdays(data2$date) %in% c("Saturday", "Sunday") + 1L, levels = 1:2, labels = c("weekday", "weekend"))
View(data2)
weekdays(data2$date)
weekdays(data2$date) %in% c("Saturday", "Sunday")
summary(data2$weekday)
str(data2$weekday)
meanOfStepsPerIntervalWeekday <- aggregate(steps ~ interval, data[data$weekday == "weekday"], mean)
meanOfStepsPerIntervalWeekday <- aggregate(steps ~ interval, data2[data2$weekday == "weekday"], mean)
View(data2)
meanOfStepsPerIntervalWeekday <- aggregate(steps ~ interval, data2[data2$weekday == "weekday", ], mean)
View(meanOfStepsPerIntervalWeekday)
plot(meanOfStepsPerIntervalWeekday)
plot(meanOfStepsPerIntervalWeekday, type = "l")
meanOfStepsPerIntervalWeekend <- aggregate(steps ~ interval, data2[data2$weekday == "weekend", ], mean)
plot(meanOfStepsPerIntervalWeekend, type = "l")
meanOfStepsPerIntervalWeekend <- aggregate(steps ~ date + interval, data2[data2$weekday == "weekend", ], mean)
plot(meanOfStepsPerIntervalWeekend, type = "l")
meanOfStepsPerIntervalWeekday <- aggregate(steps ~ date + interval, data2[data2$weekday == "weekday", ], mean)
plot(meanOfStepsPerIntervalWeekday, type = "l")
plot(meanOfStepsPerIntervalWeekday)
?plot
plot(meanOfStepsPerIntervalWeekday$interval, meanOfStepsPerIntervalWeekday$steps, type = "l")
meanOfStepsPerIntervalWeekday <- aggregate(steps ~ interval, data2[data2$weekday == "weekday", ], mean)
meanOfStepsPerIntervalWeekday <- aggregate(steps ~ date, data2[data2$weekday == "weekday", ], mean)
plot(meanOfStepsPerIntervalWeekday$interval, meanOfStepsPerIntervalWeekday$steps, type = "l")
meanOfStepsPerIntervalWeekday <- aggregate(steps ~ date, data2[data2$weekday == "weekday", ], mean)
plot(meanOfStepsPerIntervalWeekday$interval, meanOfStepsPerIntervalWeekday$steps, type = "l")
plot(meanOfStepsPerIntervalWeekday$date, meanOfStepsPerIntervalWeekday$steps, type = "l")
meanOfStepsPerIntervalWeekday <- aggregate(steps ~ interval + date, data2[data2$weekday == "weekday", ], mean)
plot(meanOfStepsPerIntervalWeekday$date, meanOfStepsPerIntervalWeekday$steps, type = "l")
meanOfStepsPerIntervalWeekday <- aggregate(steps ~ interval, data2[data2$weekday == "weekday", ], mean)
meanOfStepsPerIntervalWeekend <- aggregate(steps ~ date + interval, data2[data2$weekday == "weekend", ], mean)
plot(meanOfStepsPerIntervalWeekday$date, meanOfStepsPerIntervalWeekday$steps, type = "l")
meanOfStepsPerIntervalWeekday <- aggregate(steps ~ interval, data2[data2$weekday == "weekday", ], mean)
plot(meanOfStepsPerIntervalWeekday$date, meanOfStepsPerIntervalWeekday$steps, type = "l")
View(meanOfStepsPerIntervalWeekday)
plot(meanOfStepsPerIntervalWeekday, type = "l")
data2 <- data
# Calculate the mean of steps per interval
meanOfStepsPerInterval <- aggregate(steps ~ interval, data, mean)
# Create data frame of same length as data2 with the original steps and the imputed values
tempDf <- merge(data2, meanOfStepsPerInterval, by.x = "interval", by.y = "interval")
# Copy values where steps is NA
data2$steps <- ifelse(is.na(data2$steps), tempDf$steps.y, tempDf$steps.x)
View(data2)
aggregatedStepsPerDay <- aggregate(steps ~ date, data2, sum)
hist(aggregatedStepsPerDay$steps, breaks = 20, main = "Histogram of the sum of steps per day")
# Draw lines for mean and median
meanStepsPerDay <- mean(aggregatedStepsPerDay$steps)
abline(v = meanStepsPerDay, col = "red")
medianStepsPerDay <- median(aggregatedStepsPerDay$steps)
abline(v = medianStepsPerDay, col = "blue")
legend(x = "topright", legend = c("mean", "median"), col = c("red", "blue"), lty = 1)
```
The mean is `r meanStepsPerDay` and the median is `r medianStepsPerDay`.
## Are there differences in activity patterns between weekdays and weekends?
```{r}
# Add a column weekday/weekend
data2$weekday <- factor(weekdays(data2$date) %in% c("Saturday", "Sunday") + 1L, levels = 1:2, labels = c("weekday", "weekend"))
# Panel plot comparing the patterns for weekday/weekend
meanOfStepsPerIntervalWeekday <- aggregate(steps ~ interval, data2[data2$weekday == "weekday", ], mean)
meanOfStepsPerIntervalWeekend <- aggregate(steps ~ date + interval, data2[data2$weekday == "weekend", ], mean)
plot(meanOfStepsPerIntervalWeekday, type = "l")
meanOfStepsPerIntervalWeekday <- aggregate(steps ~ date, data2[data2$weekday == "weekday", ], mean)
meanOfStepsPerIntervalWeekend <- aggregate(steps ~ date + interval, data2[data2$weekday == "weekend", ], mean)
plot(meanOfStepsPerIntervalWeekday, type = "l")
meanOfStepsPerIntervalWeekend <- aggregate(steps ~ date, data2[data2$weekday == "weekend", ], mean)
plot(meanOfStepsPerIntervalWeekday, type = "l")
meanOfStepsPerIntervalWeekday <- aggregate(steps ~ interval, data2[data2$weekday == "weekday", ], mean)
meanOfStepsPerIntervalWeekend <- aggregate(steps ~ interval, data2[data2$weekday == "weekend", ], mean)
plot(meanOfStepsPerIntervalWeekday, type = "l")
meanOfStepsPerIntervalWeekday <- aggregate(steps ~ date + interval, data2[data2$weekday == "weekday", ], mean)
meanOfStepsPerIntervalWeekend <- aggregate(steps ~ date + interval, data2[data2$weekday == "weekend", ], mean)
plot(meanOfStepsPerIntervalWeekday, type = "l")
meanOfStepsPerIntervalWeekday <- aggregate(steps ~ date, data2[data2$weekday == "weekday", ], mean)
meanOfStepsPerIntervalWeekend <- aggregate(steps ~ date, data2[data2$weekday == "weekend", ], mean)
plot(meanOfStepsPerIntervalWeekday, type = "l")
View(meanOfStepsPerIntervalWeekday)
?aggregate
meanOfStepsPerIntervalWeekday <- aggregate(steps ~ date, by = list(data2$interval, data2$weekday), mean)
meanOfStepsPerIntervalWeekday <- aggregate(data2$steps, by = list(data2$interval, data2$weekday), mean)
View(meanOfStepsPerIntervalWeekday)
View(meanOfStepsPerInterval)
View(meanOfStepsPerIntervalWeekday)
View(data2)
meanOfStepsPerIntervalWeekday <- aggregate(data2$steps, by = list(data2$interval, data2$weekday), mean)
meanOfStepsPerIntervalWeekday <- aggregate(data2$steps, by = list(data2$interval, data2$weekday), mean)
View(meanOfStepsPerIntervalWeekday)
meanOfStepsPerIntervalWeekday <- aggregate(data2$steps, by = list(interval = data2$interval, weekday = data2$weekday), mean)
plot(meanOfStepsPerIntervalWeekday, type = "l")
meanOfStepsPerIntervalWeekday <- aggregate(data2$steps, by = list(interval = data2$interval, weekday = data2$weekday), mean)
View(meanOfStepsPerIntervalWeekday)
View(meanOfStepsPerIntervalWeekend)
Sys.setlocale("LC_TIME", "English")
# Unzip the archive
unzip("activity.zip")
# Read the data in a data frame
data <- read.csv("activity.csv", header = TRUE, na.strings = "NA", stringsAsFactors = FALSE)
data$steps <- as.numeric(data$steps)
data$date <- as.Date(data$date)
data$interval <- as.numeric(data$interval)
# Display the first rows
head(data)
sumPerDay <- tapply(data$steps, data$date, sum, na.rm = TRUE)
hist(sumPerDay, breaks = 20, main = "Histogram of the sum of steps per day")
mean(sumPerDay)
median(sumPerDay)
meanOfStepsPerInterval <- aggregate(steps ~ interval, data, mean)
# Plot calculated mean
plot(meanOfStepsPerInterval, type = "l", main = "Average number of steps per 5 minute interval", xlab = "5-minute interval", ylab = "Average number of steps taken")
# Find the maximum average number of steps
maximumNoOfSteps <- meanOfStepsPerInterval[which.max(meanOfStepsPerInterval$steps), ]
maximumNoOfSteps$interval
sum(!complete.cases(data))
anyNA(data$steps)
anyNA(data$Date)
anyNA(data$interval)
data2 <- data
# Calculate the mean of steps per interval
meanOfStepsPerInterval <- aggregate(steps ~ interval, data, mean)
# Create data frame of same length as data2 with the original steps and the imputed values
tempDf <- merge(data2, meanOfStepsPerInterval, by.x = "interval", by.y = "interval")
# Copy values where steps is NA
data2$steps <- ifelse(is.na(data2$steps), tempDf$steps.y, tempDf$steps.x)
aggregatedStepsPerDay <- aggregate(steps ~ date, data2, sum)
hist(aggregatedStepsPerDay$steps, breaks = 20, main = "Histogram of the sum of steps per day")
# Draw lines for mean and median
meanStepsPerDay <- mean(aggregatedStepsPerDay$steps)
abline(v = meanStepsPerDay, col = "red")
medianStepsPerDay <- median(aggregatedStepsPerDay$steps)
abline(v = medianStepsPerDay, col = "blue")
data2$weekday <- factor(weekdays(data2$date) %in% c("Saturday", "Sunday") + 1L, levels = 1:2, labels = c("weekday", "weekend"))
# Panel plot comparing the patterns for weekday/weekend
meanOfStepsPerIntervalWeekday <- aggregate(data2$steps, by = list(interval = data2$interval, weekday = data2$weekday), mean)
plot(meanOfStepsPerIntervalWeekday, type = "l")
View(meanOfStepsPerIntervalWeekday)
meanOfStepsPerIntervalWeekday <- aggregate(data2$steps, by = list(interval = data2$interval, weekday = data2$weekday), mean)
plot(meanOfStepsPerIntervalWeekday, type = "l")
plot(meanOfStepsPerIntervalWeekday$interval, meanOfStepsPerIntervalWeekday$steps, type = "l")
View(meanOfStepsPerIntervalWeekday)
data2 <- data
# Calculate the mean of steps per interval
meanOfStepsPerInterval <- aggregate(steps ~ interval, data, mean)
# Create data frame of same length as data2 with the original steps and the imputed values
tempDf <- merge(data2, meanOfStepsPerInterval, by.x = "interval", by.y = "interval")
# Copy values where steps is NA
data2$steps <- ifelse(is.na(data2$steps), tempDf$steps.y, tempDf$steps.x)
aggregatedStepsPerDay <- aggregate(steps ~ date, data2, sum)
hist(aggregatedStepsPerDay$steps, breaks = 20, main = "Histogram of the sum of steps per day")
meanStepsPerDay <- mean(aggregatedStepsPerDay$steps)
abline(v = meanStepsPerDay, col = "red")
medianStepsPerDay <- median(aggregatedStepsPerDay$steps)
abline(v = medianStepsPerDay, col = "blue")
legend(x = "topright", legend = c("mean", "median"), col = c("red", "blue"), lty = 1)
weekday <- factor(weekdays(data2$date) %in% c("Saturday", "Sunday") + 1L, levels = 1:2, labels = c("weekday", "weekend"))
meanOfStepsPerIntervalWeekday <- aggregate(data2$steps, by = list(interval = data2$interval, weekday = weekday), mean)
plot(meanOfStepsPerIntervalWeekday$interval, meanOfStepsPerIntervalWeekday$steps, type = "l")
View(meanOfStepsPerIntervalWeekday)
View(meanOfStepsPerIntervalWeekday)
meanOfStepsPerIntervalWeekday <- aggregate(steps ~ interval + weekday, data2, mean)
plot(meanOfStepsPerIntervalWeekday$interval, meanOfStepsPerIntervalWeekday$steps, type = "l")
View(data2)
View(meanOfStepsPerIntervalWeekday)
View(meanOfStepsPerIntervalWeekday)
data2 <- data
# Calculate the mean of steps per interval
meanOfStepsPerInterval <- aggregate(steps ~ interval, data, mean)
View(meanOfStepsPerInterval)
# Create data frame of same length as data2 with the original steps and the imputed values
tempDf <- merge(data2, meanOfStepsPerInterval, by.x = "interval", by.y = "interval")
View(tempDf)
?merge
tempDf <- merge(data2, meanOfStepsPerInterval, by.x = "interval", by.y = "interval")
View(tempDf)
tempDf <- merge(data2, meanOfStepsPerInterval, by.x = "interval", by.y = "interval", all.x = TRUE, all.y = FALSE)
View(tempDf)
# Copy values where steps is NA
tempDf <- merge(data2, meanOfStepsPerInterval, by.x = "interval", by.y = "interval", sort = C("date", "interval"))
tempDf <- merge(data2, meanOfStepsPerInterval, by.x = "interval", by.y = "interval", sort = TRUE)
View(tempDf)
View(meanOfStepsPerInterval)
data2$steps <- ifelse(is.na(data2$steps), 0, data2$steps)
aggregatedStepsPerDay <- aggregate(steps ~ date, data2, sum)
hist(aggregatedStepsPerDay$steps, breaks = 20, main = "Histogram of the sum of steps per day")
# Draw lines for mean and median
meanStepsPerDay <- mean(aggregatedStepsPerDay$steps)
abline(v = meanStepsPerDay, col = "red")
medianStepsPerDay <- median(aggregatedStepsPerDay$steps)
abline(v = medianStepsPerDay, col = "blue")
legend(x = "topright", legend = c("mean", "median"), col = c("red", "blue"), lty = 1)
data2$weekday <- factor(weekdays(data2$date) %in% c("Saturday", "Sunday") + 1L, levels = 1:2, labels = c("weekday", "weekend"))
meanOfStepsPerIntervalWeekday <- aggregate(steps ~ interval + weekday, data2, mean)
plot(meanOfStepsPerIntervalWeekday$interval, meanOfStepsPerIntervalWeekday$steps, type = "l")
?tapply
View(meanOfStepsPerInterval)
data2$steps <- ifelse(is.na(data2$steps), meanOfStepsPerInterval[data2$interval, "steps"], data2$steps)
View(data2)
data2 <- data
# Calculate the mean of steps per interval
meanOfStepsPerInterval <- aggregate(steps ~ interval, data, mean)
# Create data frame of same length as data2 with the original steps and the imputed values
tempDf <- merge(data2, meanOfStepsPerInterval, by.x = "interval", by.y = "interval", sort = TRUE)
# Copy values where steps is NA
data2$steps <- ifelse(is.na(data2$steps), meanOfStepsPerInterval[data2$interval, "steps"], data2$steps)
View(data2)
aggregatedStepsPerDay <- aggregate(steps ~ date, data2, sum)
hist(aggregatedStepsPerDay$steps, breaks = 20, main = "Histogram of the sum of steps per day")
# Draw lines for mean and median
meanStepsPerDay <- mean(aggregatedStepsPerDay$steps)
abline(v = meanStepsPerDay, col = "red")
medianStepsPerDay <- median(aggregatedStepsPerDay$steps)
abline(v = medianStepsPerDay, col = "blue")
legend(x = "topright", legend = c("mean", "median"), col = c("red", "blue"), lty = 1)
```
data2$weekday <- factor(weekdays(data2$date) %in% c("Saturday", "Sunday") + 1L, levels = 1:2, labels = c("weekday", "weekend"))
# Panel plot comparing the patterns for weekday/weekend
meanOfStepsPerIntervalWeekday <- aggregate(steps ~ interval + weekday, data2, mean)
plot(meanOfStepsPerIntervalWeekday$interval, meanOfStepsPerIntervalWeekday$steps, type = "l")
?plot
library(ggplot2)
g <- ggplot(data2)
g + geom_line() + facet_grid(weekday ~ .)
g + geom_line() + facet_grid(weekday ~ .) + theme_bw()
g <- ggplot(data2)
g + geom_line() + facet_grid(weekday ~ .) +
scale_x_continuous(breaks=0:6*4, labels=paste(0:6*4,":00", sep="")) +
theme_bw() +
labs(y="average number of steps in 5-min interval") +
labs(x="time of day (h)") +
labs(title="Daily activity pattern")
?xyplot
??xyplot
library.install("lattice")
install.library("lattice")
?mfrow
par(mfrow = c(2, 1))
plot(meanOfStepsPerIntervalWeekday$interval, meanOfStepsPerIntervalWeekday$steps, type = "l")
par(mfrow = c(2, 1))
plot(meanOfStepsPerIntervalWeekday$interval, meanOfStepsPerIntervalWeekday$steps, type = "l", xlab = "")
plot(meanOfStepsPerIntervalWeekday$interval, meanOfStepsPerIntervalWeekday$steps, type = "l")
install.packages("lattice")
library(lattice)
?xyplot
xyplot(steps ~ interval | weekday, data2)
xyplot(steps ~ interval | weekday, data2, layout = c(2, 1))
xyplot(steps ~ interval | weekday, data2, layout = c(1, 2))
xyplot(steps ~ interval | weekday, data2, layout = c(1, 2), lines = TRUE)
xyplot(steps ~ interval | weekday, data2, layout = c(1, 2), lines = TRUE, points = FALSE)
xyplot(steps ~ interval | weekday, data2, layout = c(1, 2), col=1)
xyplot(steps ~ interval | weekday, data2, layout = c(1, 2), col=1, aspect="xy")
xyplot(steps ~ interval | weekday, data2, layout = c(1, 2))
